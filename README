Ce README comporte toutes les notes et les idées que l'application pourrait implémenter. Ce n'est pas forcément le cas ! (experiments)

- Specs, Notes d'implémentation et algorithmes
Une note = un pitch (hauteur), une position (dans le loop)

La plupart du temps, on saute une position sur 2 (positions paires), parfois on saute une note sur 4 (laisser 3 blancs entre deux notes)

Une mélodie = un ensemble de notes, un nombre de notes (pitches), un nombre de loop (évolutif dans la famille)

Sur chaque mélodie, on enregistre le nombre de votes positif et négatif.

Une famille = un arbre de mélodie.

Chaque niveau de l'arbre représente un ajout d'une note et parfois une ou plusieurs mutations sur les notes existantes.
L'arbre s'arrête quand l'algo de génération ne peut plus créer de fils.
Le niveau n'est pas forcément le même pour toutes ces mélodies.
Une mélodie qui ne peut plus créer de fils est appelé ici feuille.
Une mélodie a potentiellement n filles mélodies. Mais on ne représente que les branches existantes (raison évidente de place de bdd).
Ce sont les utilisateurs qui construisent par leurs choix ces branches de mélodie.
A la première visite d'un utilisateur, on choisit une mélodie existante parmi l'arbre d'une famille (si l'état le permet).
Arrivé à un certain stade, on arrête la création de nouvelles branches, et on laisse les utilisateurs voter sur les branches existantes.
On a plus de chance de tomber sur des feuilles. On donne également plus de chances aux feuilles les moins votés pour avoir la meilleure précision.
Une fois qu'on a assez de votes sur chaque feuille, on peut donner le classement des meilleurs mélodies :
Soit en comparant le ratio like / dislike , soit avec like-dislike (à réfléchir)

A tout moment, random redirige sur n'importe quelle noeud, même en plein milieu d'une branche.
Cela permet de limiter le nombre de branches.
Si un utilisateur aime la branche, on avance d'une génération en sélectionnant un fils existant (en mode génération: proba d'en créer un nouveau non existant)
Si il n'aime pas : en mode génération: on crée un frère, en mode maturation, on passe à un autre noeud aléatoirement

états de Family (état relatif à melodies) : 
- Generation : c'est l'état initial, il permet aux utilisateurs de choisir/créer leur branche préférée.
- Maturation : cet état bloque la possibilité de créer ses propres branches. Par contre, on vote sur les noeuds existants. Il y a plus de chance de voter pour des générations élevés. On fait en sorte d'équilibrer le nombre de votes de chaque mélodie de la famille.
- Dead : La famille est fermé. Il n'est plus possible de voter. On est capable de donner le classement des meilleurs mélodies générées.

En résumé voici un apercu des algo pour les différents états de la famille :

Pour une famille F :

Initialisation de la famille : Soit par l'ordinateur, soit par l'utilisateur
- avec un certain nombre de paramètres (qui déterminent l'évolution de la famille, et les passages des différents états)
- bootstrap possible de N notes pour la mélodie root
- nombre initial de loop, nombre max de loop
- nombre de notes
- un nom unique (non existant et [a-z]{3,10} par ex)

en mode Generation :
 0. première visite : redirection aléatoire vers n'importe quelle mélodie de la famille (noeud dans l'arbre)
 1. Melodie M : on est sur une mélodie, deux choix attendent l'utilisateur like (2) et dislike (3)
 2. Clic sur like : on essayer de descendre d'une génération :
  - si impossible: on a fini, on informe l'utilisateur et repasse à l'étape 0.
  - si possible: on prends un fils au hasard. Si on en trouve pas on en crée un. On le sélectionne -> étape 1.
 3. Clic sur dislike :
  - on cherche un frère de la mélodie jamais voté "dislike" par l'utilisateur actuel. Si on en trouve un, on le sélectionne (-> étape 1)
  - Sinon, on essaye d'en créer un. Si impossible, on redirige vers 0.

Generation -> Maturation : lorsqu'on atteint un nombre suffisant de feuilles

Passage à l'état maturation :
 - Filtrage d'une partie des noeuds (peut-être les noeuds qui n'ont pas de fils et qui ne sont pas assez évolué en terme de génération et également les noeuds qui ont trop de frères...)

en mode Maturation :
  0. idem, mais on laisse plus de chance à arriver sur une génération élevée
  1. idem
  2. clic sur like : On essaye de descendre la branche (pas de création), si impossible on retourne sur 0
  3. clic sur dislike : on essaye de switch sur un frère non voté dislike, sinon on retourne sur 0

Maturation -> Dead : Lorsque toute les feuilles ont atteint un certain nombre de votes.

Dead :
Calculer le classement: plusieurs idées:
- Comparer uniquement les feuilles
-> Comparer les branches de ces feuilles (la somme des votes des noeuds de la branche d'une feuille)

Comparer ?
like - dislike : équitable si égalité du nombre de votes
like / dislike : équitable sur nombre conséquent de votes
So what ?


TODO :

  -> notes: http://egonelbre.com/js/jsfx/index.html?load=[%22synth%22,0.0000,0.4000,0.1000,0.3000,1.3260,0.2240,20.0000,804.0000,2000.0000,0.0000,0.0000,0.0000,18.0063,0.0003,0.0000,0.0000,0.1000,0.0000,0.0000,0.0000,0.0000,0.0000,0.9890,0.0000,0.0000,0.0000,0.0000]
  -> ambients : http://egonelbre.com/js/jsfx/index.html?load=[%22synth%22,0.0000,0.4000,0.1570,1.0720,0.2700,2.0000,947.0000,270.0000,1464.0000,-0.6780,-0.3100,0.0000,15.9907,-0.2363,0.9860,-0.1160,0.0790,0.1425,0.0000,0.0000,0.5440,-0.5060,0.7190,0.0340,0.2700,0.0000,0.7900]
  -> bass : http://egonelbre.com/js/jsfx/index.html?load=[%22synth%22,0.0000,1.0000,0.0000,0.1040,0.1920,0.1720,20.0000,91.0000,216.0000,-0.6180,0.0120,0.2730,9.8959,0.1134,-0.0180,-0.0720,0.0370,0.1575,-0.0040,0.0000,0.1540,-0.0780,0.9030,-0.8200,0.7790,0.4460,-0.8120]

*** priorité forte
 - implémenter le passage à l'état maturation ainsi que l'état dead
 - Timeout sur l'application (10s par exemple) qui remplace le loader par un message d'erreur, et qui informe le serveur d'un probleme. Celui ci log les infos necessaires à sa résolution.
 - Authentification par facebook, twitter, ...
 - page d'accueil avec petite aide + top melodies
 - page melodyNotFound
 - page de mélodie feuille (plus possible de créer de fils) -> c'est seulement ici qu'on met les liens share
 
 ** priorité moyenne
 - liste des familles (avec infos : état, nombre de like et dislike totaux, ...)
 - page d'aide (plus approfondie)
 - Une page de visualisation des familles de mélodies et de parcours de l'arbre d'évolution (version simple pour l'instant)
 - Ajouter les ambients et drums
 - Pouvoir créer une famille (initialiser les options)
 - Ajouter un timbre personnalisable
 - Ajouter modernizr

  * priorité faible
 
 - Internationaliser l'application (fr, en)

Mode création:
 - Une page d'édition de mélodie (valeur des notes au hover)
 - Partage par lien sociaux
 - Classement basé sur le nombre de "like" sociaux
 - modification du timbre des mélodie
